name: Auto Continuous Analysis Violations Filtering

on:
  workflow_call:
    inputs:
      project:
        required: true
        type: string
      current_commit:
        required: true
        type: string
      previous_commit:
        required: false
        type: string
      dispatch_id:
        required: false
        type: string
    secrets:
      ORG_WIDE_TOKEN:
        required: true

permissions:
  actions: read
  contents: write
  issues: write

jobs:
  auto-filter:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Download Previous Commit Artifact from Input Repository
        if: inputs.previous_commit != ''
        env:
          GH_TOKEN: ${{ secrets.ORG_WIDE_TOKEN }}
        run: |
          # Get the repository name and dispatch IDfrom the input
          REPO_NAME=$(basename "${{ inputs.project }}")
          DISPATCH_ID="${{ inputs.dispatch_id }}"
          PREVIOUS_COMMIT="${{ inputs.previous_commit }}"

          # Set the repository name in the environment
          echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV

          # Build the name prefix we expect including the commit we are looking for
          if [ -n "$DISPATCH_ID" ]; then
            ARTIFACT_PREFIX="continuous-analysis-history-results-${DISPATCH_ID}-${REPO_NAME}-${PREVIOUS_COMMIT}"
          else
            ARTIFACT_PREFIX="continuous-analysis-results-${REPO_NAME}-${PREVIOUS_COMMIT}-"
          fi
          echo "Looking for artifacts with prefix: $ARTIFACT_PREFIX"

          # Get the target artifact from the input repository
          ARTIFACT_JSON=$(gh api "repos/${{ inputs.project }}/actions/artifacts" --paginate)

          # Get the target artifact from the input repository
          ARTIFACT_INFO=$(echo "$ARTIFACT_JSON" | jq -r --arg PREFIX "$ARTIFACT_PREFIX" '.artifacts[] | select(.name | startswith($PREFIX)) | [.name, .created_at, .id] | @tsv' | sort -k2 -r | head -n 1)
          
          # Extract name and ID from the result
          ARTIFACT_NAME=$(echo "$ARTIFACT_INFO" | cut -f1)
          ARTIFACT_ID=$(echo "$ARTIFACT_INFO" | cut -f3)

          # If no artifact is found, skip the download
          if [ -z "$ARTIFACT_ID" ]; then
            echo "No matching artifact found for ${{ inputs.project }}. Skipping download."
            mkdir -p previous-artifacts
            exit 0
          fi

          # If the target artifact is found, download it
          echo "Found previous artifact: $ARTIFACT_NAME (ID: $ARTIFACT_ID) for ${{ inputs.project }}"
          curl -L \
            -H "Authorization: Bearer $GH_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ inputs.project }}/actions/artifacts/$ARTIFACT_ID/zip" \
            -o artifact.zip

          # Unzip the artifact to the previous-artifacts directory
          unzip artifact.zip -d previous-artifacts

      - name: Prepare Previous Commit Artifact for the auto-runner workflow
        if: inputs.previous_commit != ''
        id: prepare-artifact
        run: |
          # If the target artifact is found, move results file to the root of the repository
          if [ -f "previous-artifacts/continuous_analysis_over_time_results.csv" ]; then
            echo "Previous artifact found, moving to the root of the repository"
            mv previous-artifacts/continuous_analysis_over_time_results.csv continuous_analysis_over_time_results_old.csv
            echo "Previous artifact moved successfully"

          # If the target artifact is not found, skip the moving
          else
            echo "No latest results file found, skipping moving"
          fi

          # If the target artifact is found, move violations file to the root of the repository
          if [ -f "previous-artifacts/continuous_analysis_over_time_violations_filtered.csv" ]; then
            echo "Previous artifact found, moving to the root of the repository"
            mv previous-artifacts/continuous_analysis_over_time_violations_filtered.csv .
            echo "Previous artifact moved successfully"

          # If the target artifact is not found, skip the moving
          else
            echo "No latest violations file found, skipping moving"
          fi

          # Clean up the artifact directory
          rm -rf previous-artifacts/

      - name: Download Current Commit Artifact from Input Repository
        env:
          GH_TOKEN: ${{ secrets.ORG_WIDE_TOKEN }}
        run: |
          # Get the repository name and dispatch IDfrom the input
          REPO_NAME=$(basename "${{ inputs.project }}")
          DISPATCH_ID="${{ inputs.dispatch_id }}"
          CURRENT_COMMIT="${{ inputs.current_commit }}"

          # Build the name prefix we expect including the commit we are looking for
          if [ -n "$DISPATCH_ID" ]; then
            ARTIFACT_PREFIX="continuous-analysis-history-results-${DISPATCH_ID}-${REPO_NAME}-${CURRENT_COMMIT}"
          else
            ARTIFACT_PREFIX="continuous-analysis-results-${REPO_NAME}-${CURRENT_COMMIT}-"
          fi
          echo "Looking for artifacts with prefix: $ARTIFACT_PREFIX"

          # Get the target artifact from the input repository
          ARTIFACT_JSON=$(gh api "repos/${{ inputs.project }}/actions/artifacts" --paginate)

          # Get the target artifact from the input repository
          ARTIFACT_INFO=$(echo "$ARTIFACT_JSON" | jq -r --arg PREFIX "$ARTIFACT_PREFIX" '.artifacts[] | select(.name | startswith($PREFIX)) | [.name, .created_at, .id] | @tsv' | sort -k2 -r | head -n 1)
          
          # Extract name and ID from the result
          ARTIFACT_NAME=$(echo "$ARTIFACT_INFO" | cut -f1)
          ARTIFACT_ID=$(echo "$ARTIFACT_INFO" | cut -f3)

          # If no artifact is found, skip the download
          if [ -z "$ARTIFACT_ID" ]; then
            echo "No matching artifact found for ${{ inputs.project }}. Skipping download."
            mkdir -p current-artifacts
            exit 0
          fi

          # If the target artifact is found, download it
          echo "Found current artifact: $ARTIFACT_NAME (ID: $ARTIFACT_ID) for ${{ inputs.project }}"
          curl -L \
            -H "Authorization: Bearer $GH_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ inputs.project }}/actions/artifacts/$ARTIFACT_ID/zip" \
            -o artifact.zip

          # Unzip the artifact to the current-artifacts directory
          unzip artifact.zip -d current-artifacts

      - name: Prepare Current Commit Artifact for the auto-runner workflow
        id: prepare-artifact
        run: |
          # If the target artifact is found, move results file to the root of the repository
          if [ -f "current-artifacts/continuous_analysis_over_time_results.csv" ]; then
            echo "Current artifact found, moving to the root of the repository"
            mv current-artifacts/continuous_analysis_over_time_results.csv continuous_analysis_over_time_results_new.csv
            echo "Current artifact moved successfully"

          # If the target artifact is not found, skip the moving
          else
            echo "No latest results file found, skipping moving"
          fi

          # Clean up the artifact directory
          rm -rf current-artifacts/

      - Name: Concatenate Results Files
        run: |
          cat continuous_analysis_over_time_results_old.csv <(tail -n +2 continuous_analysis_over_time_results_new.csv) > continuous_analysis_over_time_results.csv
          echo "Results files concatenated successfully"
          rm -f continuous_analysis_over_time_results_old.csv continuous_analysis_over_time_results_new.csv

      - name: Checkout Continuous-Analysis Repository
        uses: actions/checkout@v4
        with:
          repository: ContinuousAnalysis/continuous-analysis
          path: continuous-analysis

      - name: Checkout Testing Repository
        run: |
          # Define the repository URL
          REPO_URL="https://github.com/${{ inputs.project }}.git"

          # Clone the repository
          git clone "$REPO_URL" "$REPO_NAME"
          cd "$REPO_NAME"

          # Checkout the specific commit if provided
          if [ -n "${{ inputs.current_commit }}" ]; then
            echo "Checking out specific commit: ${{ inputs.current_commit }}"
            git checkout ${{ inputs.current_commit }}
          else
            echo "Using default branch"
          fi

          # Rename the repository to the original name
          cd ..
          mv "$REPO_NAME" "$REPO_NAME-original"
          echo "Renamed repository to $REPO_NAME-original"

      - name: Filter out the New Violations based on the Commit Changes
        run: |
          # Install the requirements for the script
          pip install -r continuous-analysis/requirements.txt

          # Only run the script if a commit is provided
          if [ -n "${{ inputs.current_commit }}" ]; then
            python3 continuous-analysis/scripts/filter_new_violations.py $REPO_NAME-original ${{ inputs.current_commit }}
          else
            echo "No commit provided, skipping change tracking"
          fi

      - name: Generate timestamp
        id: timestamp
        run: |
          ts=$(date +'%Y%m%d-%H%M')
          echo "ts=$ts" >> "$GITHUB_OUTPUT"
          echo "Generated timestamp: $ts"

      - name: Upload Violation Reports
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.dispatch_id && format('continuous-analysis-history-results-{0}-{1}-{2}', inputs.dispatch_id, env.REPO_NAME, inputs.current_commit) || format('continuous-analysis-results-{0}-{1}-{2}', env.REPO_NAME, inputs.current_commit, steps.timestamp.outputs.ts) }}
          path: |
            continuous_analysis_over_time_results.csv
            continuous_analysis_over_time_violations_filtered.csv
          retention-days: 30
